{"ast":null,"code":"var _jsxFileName = \"C:\\\\home\\\\IT\\\\Python\\\\DjangoPractice\\\\front-end\\\\teach-app\\\\src\\\\containers\\\\Signup.js\";\nimport React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/auth\";\nimport { Form, Input, Icon, Select, Button } from \"antd\";\nconst Option = Select.Option;\n\nclass Signup extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          let is_student = false;\n          if (values.userType === \"student\") is_student = true;\n          this.props.onAuth(values.userName, values.email, values.password, values.confirm, is_student);\n          this.props.history.push(\"/\"); // console.log(values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, errorMessage, React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, getFieldDecorator(\"userName\", {\n      rules: [{\n        required: true,\n        message: \"Please input your username!\"\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, getFieldDecorator(\"email\", {\n      rules: [{\n        type: \"email\",\n        message: \"The input is not valid E-mail!\"\n      }, {\n        required: true,\n        message: \"Please input your E-mail!\"\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }),\n      placeholder: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, getFieldDecorator(\"confirm\", {\n      rules: [{\n        required: true,\n        message: \"Please confirm your password!\"\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: \"rgba(0,0,0,.25)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }) //   <Input\n    //   type=\"password\" onBlur={this.handleConfirmBlur} />\n    )), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, getFieldDecorator(\"userType\", {\n      rules: [{\n        required: true,\n        message: \"Please select a user!\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Select a user type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"student\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Student\"), React.createElement(Option, {\n      value: \"teacher\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Teacher\")))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      style: {\n        marginRight: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Signup\"), \"Or\", React.createElement(NavLink, {\n      style: {\n        marginRight: \"10px\"\n      },\n      to: \"/login/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \" \", \"login\"))));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create()(Signup);\n\nconst mapStateToProps = state => {\n  return {\n    error: state.auth.error,\n    loading: state.auth.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2, is_student) => dispatch(actions.authSignup(username, email, password1, password2, is_student))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);","map":{"version":3,"sources":["C:\\home\\IT\\Python\\DjangoPractice\\front-end\\teach-app\\src\\containers\\Signup.js"],"names":["React","Component","NavLink","connect","actions","Form","Input","Icon","Select","Button","Option","Signup","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","is_student","userType","onAuth","userName","email","password","confirm","history","push","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","errorMessage","error","message","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","rules","required","color","type","validator","marginRight","WrappedRegistrationForm","create","mapStateToProps","auth","loading","mapDispatchToProps","dispatch","username","password1","password2","authSignup"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../store/actions/auth\";\r\n\r\nimport { Form, Input, Icon, Select, Button } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass Signup extends React.Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: []\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        let is_student = false;\r\n        if (values.userType === \"student\") is_student = true;\r\n        this.props.onAuth(\r\n          values.userName,\r\n          values.email,\r\n          values.password,\r\n          values.confirm,\r\n          is_student\r\n        );\r\n        this.props.history.push(\"/\");\r\n        // console.log(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = e => {\r\n    const value = e.target.value;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue(\"password\")) {\r\n      callback(\"Two passwords that you enter is inconsistent!\");\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields([\"confirm\"], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  render() {\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        {errorMessage}\r\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n          <Form.Item>\r\n            {getFieldDecorator(\"userName\", {\r\n              rules: [\r\n                { required: true, message: \"Please input your username!\" }\r\n              ]\r\n            })(\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                placeholder=\"Username\"\r\n              />\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            {getFieldDecorator(\"email\", {\r\n              rules: [\r\n                {\r\n                  type: \"email\",\r\n                  message: \"The input is not valid E-mail!\"\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your E-mail!\"\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"mail\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                placeholder=\"E-mail\"\r\n              />\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            {getFieldDecorator(\"password\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your password!\"\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            {getFieldDecorator(\"confirm\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please confirm your password!\"\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                prefix={\r\n                  <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\r\n                }\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onBlur={this.handleConfirmBlur}\r\n              />\r\n              //   <Input\r\n\r\n              //   type=\"password\" onBlur={this.handleConfirmBlur} />\r\n            )}\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            {getFieldDecorator(\"userType\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please select a user!\"\r\n                }\r\n              ]\r\n            })(\r\n              <Select placeholder=\"Select a user type\">\r\n                <Option value=\"student\">Student</Option>\r\n                <Option value=\"teacher\">Teacher</Option>\r\n              </Select>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{ marginRight: \"10px\" }}\r\n            >\r\n              Signup\r\n            </Button>\r\n            Or\r\n            <NavLink style={{ marginRight: \"10px\" }} to=\"/login/\">\r\n              {\" \"}\r\n              login\r\n            </NavLink>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedRegistrationForm = Form.create()(Signup);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    error: state.auth.error,\r\n    loading: state.auth.loading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (username, email, password1, password2, is_student) =>\r\n      dispatch(\r\n        actions.authSignup(username, email, password1, password2, is_student)\r\n      )\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WrappedRegistrationForm);\r\n"]},"metadata":{},"sourceType":"module"}