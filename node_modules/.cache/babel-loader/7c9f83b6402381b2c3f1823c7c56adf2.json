{"ast":null,"code":"var _jsxFileName = \"C:\\\\home\\\\IT\\\\Python\\\\DjangoPractice\\\\front-end\\\\teach-app\\\\src\\\\containers\\\\CreateTest.js\";\nimport React from \"react\";\nimport { Form, Input, Icon, Button, Divider, Select } from \"antd\";\nimport QuestionForm from \"./QuestionForm\";\nimport Hoc from \"../hoc/hoc\";\nimport { connect } from \"react-redux\";\nimport { createASNT } from \"../store/actions/assignments\";\nconst Option = Select.Option;\nconst FormItem = Form.Item;\n\nclass CreateTest extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formCount: 1,\n      values: []\n    };\n\n    this.remove = () => {\n      const formCount = this.state.formCount;\n      this.setState({\n        formCount: formCount - 1\n      });\n    };\n\n    this.add = () => {\n      const formCount = this.state.formCount;\n      this.setState({\n        formCount: formCount + 1\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n          const questions = [];\n\n          for (let i = 0; i < values.questions.length; i += 1) {\n            questions.push({\n              title: values.question[i],\n              choices: values.questions[i].choices.filter(el => el !== null),\n              answer: values.answers[i]\n            });\n          }\n\n          const asnt = {\n            teacher: this.props.username,\n            title: values.title,\n            category: values.tag,\n            questions\n          };\n          this.props.createASNT(this.props.token, asnt);\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const questions = [];\n\n    for (let i = 0; i < this.state.formCount; i += 1) {\n      questions.push(React.createElement(Hoc, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, questions.length > 0 ? React.createElement(Icon, {\n        className: \"dynamic-delete-button\",\n        type: \"minus-circle-o\",\n        disabled: questions.length === 0,\n        onClick: () => this.remove(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }) : null, React.createElement(QuestionForm, Object.assign({\n        id: i\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Create a Test\"), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, getFieldDecorator(\"title\", {\n      validateTrigger: [\"onChange\", \"onBlur\"],\n      rules: [{\n        required: true,\n        message: \"Please input a title\"\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"Add a title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), questions, React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"secondary\",\n      onClick: this.add,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), \" Add question\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, getFieldDecorator(\"tag\", {\n      rules: [{\n        required: true,\n        message: \"Please select language for your test!\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Please select language for your test\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"java\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Java\"), React.createElement(Option, {\n      value: \"javascript\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"JavaScript\"), React.createElement(Option, {\n      value: \"python\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Python\")))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      onClick: () => console.log(this.state.values),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nconst WrappedAssignmentCreate = Form.create()(CreateTest);\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    username: state.auth.username,\n    loading: state.assignments.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createASNT: (token, asnt) => dispatch(createASNT(token, asnt))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedAssignmentCreate);","map":{"version":3,"sources":["C:\\home\\IT\\Python\\DjangoPractice\\front-end\\teach-app\\src\\containers\\CreateTest.js"],"names":["React","Form","Input","Icon","Button","Divider","Select","QuestionForm","Hoc","connect","createASNT","Option","FormItem","Item","CreateTest","Component","state","formCount","values","remove","setState","add","handleSubmit","e","preventDefault","props","form","validateFields","err","console","log","questions","i","length","push","title","question","choices","filter","el","answer","answers","asnt","teacher","username","category","tag","token","render","getFieldDecorator","validateTrigger","rules","required","message","WrappedAssignmentCreate","create","mapStateToProps","auth","loading","assignments","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Form, Input, Icon, Button, Divider, Select } from \"antd\";\r\nimport QuestionForm from \"./QuestionForm\";\r\nimport Hoc from \"../hoc/hoc\";\r\nimport { connect } from \"react-redux\";\r\nimport { createASNT } from \"../store/actions/assignments\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst FormItem = Form.Item;\r\n\r\nclass CreateTest extends React.Component {\r\n  state = {\r\n    formCount: 1,\r\n    values: []\r\n  };\r\n\r\n  remove = () => {\r\n    const { formCount } = this.state;\r\n    this.setState({\r\n      formCount: formCount - 1\r\n    });\r\n  };\r\n\r\n  add = () => {\r\n    const { formCount } = this.state;\r\n    this.setState({\r\n      formCount: formCount + 1\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log(\"Received values of form: \", values);\r\n        const questions = [];\r\n        for (let i = 0; i < values.questions.length; i += 1) {\r\n          questions.push({\r\n            title: values.question[i],\r\n            choices: values.questions[i].choices.filter(el => el !== null),\r\n            answer: values.answers[i]\r\n          });\r\n        }\r\n        const asnt = {\r\n          teacher: this.props.username,\r\n          title: values.title,\r\n          category: values.tag,\r\n          questions\r\n        };\r\n        this.props.createASNT(this.props.token, asnt);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const questions = [];\r\n    for (let i = 0; i < this.state.formCount; i += 1) {\r\n      questions.push(\r\n        <Hoc key={i}>\r\n          {questions.length > 0 ? (\r\n            <Icon\r\n              className=\"dynamic-delete-button\"\r\n              type=\"minus-circle-o\"\r\n              disabled={questions.length === 0}\r\n              onClick={() => this.remove()}\r\n            />\r\n          ) : null}\r\n          <QuestionForm id={i} {...this.props} />\r\n          <Divider />\r\n        </Hoc>\r\n      );\r\n    }\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <h1>Create a Test</h1>\r\n        <FormItem>\r\n          {getFieldDecorator(`title`, {\r\n            validateTrigger: [\"onChange\", \"onBlur\"],\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please input a title\"\r\n              }\r\n            ]\r\n          })(<Input placeholder=\"Add a title\" />)}\r\n        </FormItem>\r\n        {questions}\r\n        <FormItem>\r\n          <Button type=\"secondary\" onClick={this.add}>\r\n            <Icon type=\"plus\" /> Add question\r\n          </Button>\r\n        </FormItem>\r\n        <Form.Item>\r\n          {getFieldDecorator(\"tag\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please select language for your test!\"\r\n              }\r\n            ]\r\n          })(\r\n            <Select placeholder=\"Please select language for your test\">\r\n              <Option value=\"java\">Java</Option>\r\n              <Option value=\"javascript\">JavaScript</Option>\r\n              <Option value=\"python\">Python</Option>\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <FormItem>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            onClick={() => console.log(this.state.values)}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </FormItem>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedAssignmentCreate = Form.create()(CreateTest);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    token: state.auth.token,\r\n    username: state.auth.username,\r\n    loading: state.assignments.loading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createASNT: (token, asnt) => dispatch(createASNT(token, asnt))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WrappedAssignmentCreate);\r\n"]},"metadata":{},"sourceType":"module"}