{"ast":null,"code":"var _jsxFileName = \"C:\\\\home\\\\IT\\\\Python\\\\DjangoPractice\\\\front-end\\\\teach-app\\\\src\\\\containers\\\\TestDetail.js\";\nimport React from \"react\";\nimport { Card, Skeleton, message } from \"antd\";\nimport Questions from \"./Questions\";\nimport Choices from \"../components/Choices\";\nimport Hoc from \"../hoc/hoc\";\nconst cardStyle = {\n  marginTop: \"20px\",\n  marginBottom: \"20px\"\n};\nconst VALUE = {\n  title: \"Title\",\n  tag: \"java\",\n  answers: [\"a1\", \"a2\"],\n  question: [\"q1\", \"q2\"],\n  questions: [{\n    choices: [\"a2\", \"a1\"],\n    order: 1\n  }, {\n    choices: [\"a2-2\", \"fd;a\"],\n    order: 2\n  }]\n};\n\nclass TestDetail extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      usersAnswers: {}\n    };\n\n    this.onChange = (e, qId) => {\n      const usersAnswers = this.state.usersAnswers;\n      usersAnswers[qId] = e.target.value;\n      this.setState({\n        usersAnswers\n      });\n    };\n  }\n\n  handleSubmit() {\n    message.success(\"Submitting your assignment!\");\n    const usersAnswers = this.state.usersAnswers;\n    console.log(usersAnswers);\n  }\n\n  render() {\n    const currentAssignment = VALUE;\n    const title = currentAssignment.title;\n    const usersAnswers = this.state.usersAnswers;\n    return React.createElement(Hoc, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, Object.keys(currentAssignment).length > 0 ? React.createElement(Hoc, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(Skeleton, {\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }) : React.createElement(Card, {\n      title: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Questions, {\n      submit: () => this.handleSubmit(),\n      questions: currentAssignment.questions.map(q => {\n        return React.createElement(Card, {\n          style: cardStyle,\n          type: \"inner\",\n          key: q.order,\n          title: \"\".concat(q.order, \". \").concat(q.question),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(Choices, {\n          questionId: q.order,\n          choices: q.choices,\n          change: this.onChange,\n          usersAnswers: usersAnswers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }));\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }))) : null);\n  }\n\n}\n\nexport default TestDetail;","map":{"version":3,"sources":["C:\\home\\IT\\Python\\DjangoPractice\\front-end\\teach-app\\src\\containers\\TestDetail.js"],"names":["React","Card","Skeleton","message","Questions","Choices","Hoc","cardStyle","marginTop","marginBottom","VALUE","title","tag","answers","question","questions","choices","order","TestDetail","Component","state","usersAnswers","onChange","e","qId","target","value","setState","handleSubmit","success","console","log","render","currentAssignment","Object","keys","length","props","loading","map","q"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Card, Skeleton, message } from \"antd\";\r\nimport Questions from \"./Questions\";\r\nimport Choices from \"../components/Choices\";\r\nimport Hoc from \"../hoc/hoc\";\r\n\r\nconst cardStyle = {\r\n  marginTop: \"20px\",\r\n  marginBottom: \"20px\"\r\n};\r\n\r\nconst VALUE = {\r\n  title: \"Title\",\r\n  tag: \"java\",\r\n  answers: [\"a1\", \"a2\"],\r\n  question: [\"q1\", \"q2\"],\r\n\r\n  questions: [\r\n    { choices: [\"a2\", \"a1\"], order: 1 },\r\n    { choices: [\"a2-2\", \"fd;a\"], order: 2 }\r\n  ]\r\n};\r\n\r\nclass TestDetail extends React.Component {\r\n  state = {\r\n    usersAnswers: {}\r\n  };\r\n\r\n  onChange = (e, qId) => {\r\n    const { usersAnswers } = this.state;\r\n    usersAnswers[qId] = e.target.value;\r\n    this.setState({ usersAnswers });\r\n  };\r\n\r\n  handleSubmit() {\r\n    message.success(\"Submitting your assignment!\");\r\n    const { usersAnswers } = this.state;\r\n    console.log(usersAnswers);\r\n  }\r\n\r\n  render() {\r\n    const currentAssignment = VALUE;\r\n    const { title } = currentAssignment;\r\n    const { usersAnswers } = this.state;\r\n    return (\r\n      <Hoc>\r\n        {Object.keys(currentAssignment).length > 0 ? (\r\n          <Hoc>\r\n            {this.props.loading ? (\r\n              <Skeleton active />\r\n            ) : (\r\n              <Card title={title}>\r\n                <Questions\r\n                  submit={() => this.handleSubmit()}\r\n                  questions={currentAssignment.questions.map(q => {\r\n                    return (\r\n                      <Card\r\n                        style={cardStyle}\r\n                        type=\"inner\"\r\n                        key={q.order}\r\n                        title={`${q.order}. ${q.question}`}\r\n                      >\r\n                        <Choices\r\n                          questionId={q.order}\r\n                          choices={q.choices}\r\n                          change={this.onChange}\r\n                          usersAnswers={usersAnswers}\r\n                        />\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                />\r\n              </Card>\r\n            )}\r\n          </Hoc>\r\n        ) : null}\r\n      </Hoc>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestDetail;\r\n"]},"metadata":{},"sourceType":"module"}